import pygame
import numpy as np
import time
import random
import sys
import math

# 初始化
pygame.init()
WIDTH, HEIGHT = 800, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Techno Synth with Clouds and Trees")

# 颜色定义
SKY_BLUE = (173, 216, 230)
WHITE = (255, 255, 255)
PINK = (255, 105, 180)
YELLOW = (255, 255, 102)
CYAN = (0, 255, 255)
MAGENTA = (255, 0, 255)
GREEN = (0, 200, 0)
DARK_GREEN = (0, 100, 0)
BROWN = (139, 69, 19)
LIGHTNING = (245, 245, 245)
CYBER_GREEN = (0, 255, 128)
MINT_GREEN = (152, 255, 204)

COLOR_MAP = {
    'kick': PINK,
    'snare': YELLOW,
    'hat': WHITE,
    'bass': MAGENTA
}

sample_rate = 44100
pygame.mixer.init(frequency=sample_rate, size=-16, channels=1)

# 新增滤波 + 调制 + 响度渐变的“酸性”音效生成函数
def generate_acid_wave(freq, duration=0.3, wave_type='saw', resonance=0.7):
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    env = np.exp(-t * 5)  # 衰减包络
    if wave_type == 'saw':
        wave = 0.6 * (2 * (t * freq - np.floor(t * freq + 0.5))) * env
    elif wave_type == 'square':
        wave = 0.5 * np.sign(np.sin(2 * np.pi * freq * t)) * env
    elif wave_type == 'acid':
        # 类似 TB-303 效果的酸性锯齿 + 频率滑动 + 正弦调制
        base = 2 * (t * freq - np.floor(t * freq + 0.5))
        mod = np.sin(2 * np.pi * 4 * t) * 0.3  # 低频调制
        wave = 0.4 * (base + mod) * env
    else:
        wave = np.zeros_like(t)
    wave = np.clip(wave, -1, 1)
    return (wave * 32767).astype(np.int16)

# 应用酸性音效
kick_sound = pygame.mixer.Sound(generate_acid_wave(60, 0.2, 'square'))
snare_sound = pygame.mixer.Sound(generate_acid_wave(320, 0.15, 'acid'))
hat_sound = pygame.mixer.Sound(generate_acid_wave(10000, 0.05, 'square'))
bass_sound = pygame.mixer.Sound(generate_acid_wave(140, 0.25, 'acid'))

kick_seq = [1, 0, 0, 0] * 4
snare_seq = [0]*12 + [1] + [0]*3
hat_seq = [0, 1] * 8
bass_seq = [1, 0, 0, 1] * 4

def randomize_patterns():
    global kick_seq, snare_seq, hat_seq, bass_seq
    kick_seq = [1 if i % 4 == 0 or random.random() < 0.1 else 0 for i in range(16)]
    snare_seq = [1 if i == 12 else (1 if random.random() < 0.1 else 0) for i in range(16)]
    hat_seq = [1 if random.random() < 0.6 else 0 for _ in range(16)]
    bass_seq = [1 if random.random() < 0.4 else 0 for _ in range(16)]

bpm = 125
step = 0
playing = False
interval = 60 / bpm
last_beat_time = time.time()
clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 28)

GRID_SIZE = 20
CELL_SIZE = 40
GRID_TOP = 0
GRID_LEFT = (WIDTH - GRID_SIZE * CELL_SIZE) // 2
visual_grid = [[[] for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]

play_button = pygame.Rect(350, 20, 100, 40)
random_button = pygame.Rect(350, 70, 100, 35)

clouds = [{'x': x * 150, 'y': 80, 'v': 0} for x in range(6)]
trees = [{'x': x * 100 + 50, 'r': 0, 'glow': 0} for x in range(8)]
rain_drops = []
allow_rain_this_round = False
lightning_timer = 0

def draw_ui():
    screen.fill(SKY_BLUE)
    pygame.draw.rect(screen, (0,200,0) if playing else (100,100,100), play_button)
    screen.blit(font.render("STOP" if playing else "PLAY", True, (0,0,0)), (play_button.x+15, play_button.y+10))
    pygame.draw.rect(screen, (100,100,100), random_button)
    screen.blit(font.render("RANDOM", True, (0,0,0)), (random_button.x+10, random_button.y+8))
    for i in range(16):
        x = 40 + i * 40
        y_base = 710
        pygame.draw.rect(screen, CYAN if i == step else WHITE, (x, y_base, 30, 30), 2)
        if kick_seq[i]: pygame.draw.circle(screen, PINK, (x+15, y_base+15), 4)
        if snare_seq[i]: pygame.draw.circle(screen, YELLOW, (x+15, y_base+15), 4)
        if hat_seq[i]: pygame.draw.circle(screen, WHITE, (x+15, y_base+15), 2)
        if bass_seq[i]: pygame.draw.rect(screen, MAGENTA, (x+10, y_base+25, 10, 5))

def draw_visual_grid():
    for r in range(GRID_SIZE):
        for c in range(GRID_SIZE):
            for blob in visual_grid[r][c]:
                alpha = max(0, 255 - (pygame.time.get_ticks() - blob['time']) // 2)
                if alpha > 0:
                    surf = pygame.Surface((CELL_SIZE, CELL_SIZE), pygame.SRCALPHA)
                    color = blob['color'] + (alpha,)
                    pygame.draw.rect(surf, color, (0, 0, CELL_SIZE, CELL_SIZE))
                    x = c * CELL_SIZE + GRID_LEFT
                    y = r * CELL_SIZE + GRID_TOP
                    screen.blit(surf, (x, y))

def symmetric_points(r, c, mode):
    gs = GRID_SIZE
    base = [(r, c)]
    if mode == 'vertical': base.append((r, gs - 1 - c))
    elif mode == 'horizontal': base.append((gs - 1 - r, c))
    elif mode == 'diagonal_main': base.append((c, r))
    elif mode == 'diagonal_anti': base.append((gs - 1 - c, gs - 1 - r))
    elif mode == 'quad':
        base += [(r, gs - 1 - c), (gs - 1 - r, c), (gs - 1 - r, gs - 1 - c)]
    return list(set((rr, cc) for rr, cc in base if 0 <= rr < gs and 0 <= cc < gs))

def spawn_texture_pattern(color_key):
    center = (random.randint(6,9), random.randint(6,9))
    mode = random.choice(['vertical', 'horizontal', 'diagonal_main', 'diagonal_anti', 'quad'])
    time_now = pygame.time.get_ticks()
    for dr in range(-2, 3):
        for dc in range(-2, 3):
            if abs(dr) + abs(dc) <= 3:
                r, c = center[0] + dr, center[1] + dc
                for rr, cc in symmetric_points(r, c, mode):
                    visual_grid[rr][cc].append({'color': COLOR_MAP[color_key], 'time': time_now})

def decay_visual_grid():
    now = pygame.time.get_ticks()
    for r in range(GRID_SIZE):
        for c in range(GRID_SIZE):
            visual_grid[r][c] = [b for b in visual_grid[r][c] if now - b['time'] < 1200]

def draw_clouds():
    for c in clouds:
        pygame.draw.ellipse(screen, COLOR_MAP['hat'], (c['x'], c['y'], 80, 40), 2)
        c['x'] = (c['x'] + 0.1) % WIDTH


def draw_trees():
    for t in trees:
        x = t['x']
        base_y = HEIGHT - 100
        glow = t['glow']
        pygame.draw.rect(screen, CYBER_GREEN, (x + 12, base_y - 50, 6, 50))

        # 锯齿结构
        points = [(x + 5 + i * 5, base_y - 50 - (i % 2) * 15) for i in range(7)]
        pygame.draw.lines(screen, CYBER_GREEN, False, points, 2)



def draw_bottom_grid():
    grid_color = (50, 255, 150)
    spacing = 40
    base_y = GRID_TOP
    for i in range(0, 5):
        y = base_y + i * 20
        pygame.draw.line(screen, grid_color, (0, y), (WIDTH, y), 1)
    for x in range(0, WIDTH, spacing):
        pygame.draw.line(screen, grid_color, (x, base_y), (x, HEIGHT), 1)

def draw_rain():
    new_rain_drops = []
    for drop in rain_drops:
        drop['y'] += drop['vy']
        pygame.draw.line(screen, WHITE, (drop['x'], drop['y']), (drop['x'], drop['y'] + 5), 1)
        if drop['y'] < HEIGHT - 100:
            new_rain_drops.append(drop)
        else:
            grid_x = int((drop['x'] - GRID_LEFT) / CELL_SIZE)
            grid_y = GRID_SIZE - 1
            if 0 <= grid_x < GRID_SIZE:
                time_now = pygame.time.get_ticks()
                visual_grid[grid_y][grid_x].append({'color': CYBER_GREEN, 'time': time_now})
            pygame.draw.circle(screen, CYAN, (int(drop['x']), HEIGHT - 100), 8, 1)
    rain_drops[:] = new_rain_drops

def draw_lightning():
    global lightning_timer
    if lightning_timer > 0:
        screen.fill(LIGHTNING)
        lightning_timer -= 1

running = True
last_visual_update = pygame.time.get_ticks()

while running:
    draw_ui()
    draw_visual_grid()
    draw_clouds()
    draw_trees()
    draw_rain()
    draw_lightning()

    now_ticks = pygame.time.get_ticks()
    if now_ticks - last_visual_update > 100:
        decay_visual_grid()
        last_visual_update = now_ticks

    for event in pygame.event.get():
        if event.type == pygame.QUIT: running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if play_button.collidepoint(event.pos):
                playing = not playing
                last_beat_time = time.time()
            elif random_button.collidepoint(event.pos):
                randomize_patterns()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP: bpm += 5
            elif event.key == pygame.K_DOWN: bpm = max(30, bpm - 5)
            interval = 60 / bpm

    if playing:
        now = time.time()
        if now - last_beat_time >= interval / 4:
            last_beat_time = now

            if step == 15:
                allow_rain_this_round = all(hat_seq[i] for i in [3,7,11,15])

            if kick_seq[step]:
                kick_sound.play()
                spawn_texture_pattern('kick')

            if snare_seq[step]:
                snare_sound.play()
                spawn_texture_pattern('snare')
                if random.random() < 0.01:
                    lightning_timer = 2

            if hat_seq[step]:
                hat_sound.play()
                spawn_texture_pattern('hat')
                for c in clouds:
                    c['jitter'] = random.randint(-5, 5)
                    if allow_rain_this_round and random.random() < 0.5:
                        for _ in range(random.randint(1, 3)):
                            rain_drops.append({'x': c['x'] + random.randint(0, 50), 'y': c['y'] + 30, 'vy': random.uniform(3, 5)})

            if bass_seq[step]:
                bass_sound.play()
                spawn_texture_pattern('bass')

            for t in trees:
                t['glow'] = 255

            for t in trees:
                t['jitter'] = random.randint(-3, 3)

            step = (step + 1) % 16

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()
